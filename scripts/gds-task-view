#!/usr/bin/env bash

: '
Collect task stdout or stderr
'

set -euo pipefail

print_help(){
  echo "
        Usage: gds-task-view (--task-run-id trn.abcdef12345678910 ) ( --stdout | --stderr ) [ --to-stdout | --browser ]

        Description:
          Given a task run id and --stdout, --stderr value, view the log file.
          Calls gds-view to view the file.

        Options:
            -g / --task-run-id: Path to gds file
            -o / --stdout: Shows the task stdout
            -e / --stderr: Shows the task stderr
            -s / --to-stdout: Print file to stdout
            -b / --browser: Show in browser

        Requirements:
          * docker | podman
          * jq
          * python3
          * wget

        Environment:
          * ICA_BASE_URL
          * ICA_ACCESS_TOKEN
          * BROWSER (only if --browser is set)
  "
}

# Functions
get_task_log_file(){
  : '
  Get task stdout
  '

  local task_id="$1"
  local log_file_key="$2"
  local base_url="$3"
  local access_token="$4"

  curl \
    --silent \
    --request GET \
    --header "Authorization: Bearer ${access_token}" \
    "${base_url}/v1/tasks/runs/${task_id}" | \
  "$(get_docker_binary)" run \
    --rm \
    --interactive \
    --entrypoint jq \
    "quay.io/umccr/alpine-jq:1.6" \
      --arg "log_file_key" "${log_file_key}" \
      --raw-output \
      '.logs[] | .[$log_file_key]'
}

# Initialise variables
task_id=""
base_url="${ICA_BASE_URL-}"
access_token="${ICA_ACCESS_TOKEN-}"
to_stdout="false"
browser="false"
print_stdout=0
print_stderr=0
log_gds_path=""

# Collect inputs
while [ $# -gt 0 ]; do
    case "$1" in
        -t|--task-run-id)
            task_id="$2"
            shift 1
        ;;
        -o|--stdout)
            print_stdout="1"
        ;;
        -e|--stderr)
            print_stderr="1"
        ;;
        -s|--to-stdout)
            to_stdout="true"
        ;;
        -b|--browser)
            browser="true"
        ;;
        -h|--help)
            print_help
            exit 1
    esac
    shift
done

###########ICA-ICA-LAZY SETUP ########################################

if [[ -z "${ICA_ICA_LAZY_HOME-}" ]]; then
  echo "Error - please ensure env var 'ICA_ICA_LAZY_HOME' is set" 1>&2
  exit 1
fi

if [[ -d "${ICA_ICA_LAZY_HOME}/internal-functions" ]]; then
  for f in "${ICA_ICA_LAZY_HOME}/internal-functions/"*".sh"; do
      # shellcheck source=../internal-functions/*.sh
      source "$f"
  done
fi

##########END ICA-ICA-LAZY SETUP ####################################

# Get log gds path
if [[ "${print_stdout}" == "1" ]]; then
  log_gds_path="$(get_task_log_file "${task_id}" "stdout" "${base_url}" "${access_token}")"
elif [[ "${print_stderr}" == "1" ]]; then
  log_gds_path="$(get_task_log_file "${task_id}" "stderr" "${base_url}" "${access_token}")"
else
  echo "Error: Please specify -o/--stdout or -e/stderr to print" 1>&2
  print_help
  exit 1
fi

# Checks, ensure access_token is set
if [[ -z "${access_token}" ]]; then
  echo "Error: Need to set ICA_ACCESS_TOKEN env var" 1>&2
  echo "Error: Please first run ica-context-switcher" 1>&2
  print_help
  exit 1
fi

# Stdout param
if [[ "${to_stdout}" == "true" ]]; then
  out_param="--to-stdout"
elif [[ "${browser}" == "true" ]]; then
  out_param="--browser"
else
  out_param=""
fi

# Run ica_view
ICA_ACCESS_TOKEN="${access_token}" \
ICA_BASE_URL="${base_url}" \
   gds-view \
    --gds-path "${log_gds_path}" "${out_param}"
