#!/usr/bin/env bash

: '
Collect all of the tasks from a workflow history
'

print_help(){
  echo "
  Usage ica-get-tasks-from-workflow-history (--ica-workflow-run-id <ica-workflow-run-id>)

  Description:
    Given an ica workflow run id, this script collects the history from the history end point
    and returns all of the tasks associated with this workflow


  Options:
    -w / --ica-workflow-run-id: The ICA workflow run ID you would like to find all the tasks from
    -r / --include-hardware: Include the hardware used in a step
    -d / --include-docker-image: Include the docker image used in a step
    -a / --include-args: Include arguments used in a step

  Requirements:
    * curl
    * jq

  Environment variables:
    * ICA_ACCESS_TOKEN
    * ICA_BASE_URL
  "
}

# Get args from the command line
ica_workflow_run_id=""
include_hardware="false"
include_docker_image="false"
include_args="false"

# Get args from command line
while [ $# -gt 0 ]; do
  case "$1" in
    -w | --ica-workflow-run-id)
      ica_workflow_run_id="$2"
      shift 1
      ;;
    -r | --include-hardware)
      include_hardware="true"
      ;;
    -d | --include-docker-image)
      include_docker_image="true"
      ;;
    -a | --include-args)
      include_args="true"
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
    *)
      print_help
      exit 1
      ;;
  esac
  shift 1
done

###########ICA-ICA-LAZY SETUP ########################################

if [[ -z "${ICA_ICA_LAZY_HOME-}" ]]; then
  echo "Error - please ensure env var 'ICA_ICA_LAZY_HOME' is set" 1>&2
  exit 1
fi

if [[ -d "${ICA_ICA_LAZY_HOME}/internal-functions" ]]; then
  for f in "${ICA_ICA_LAZY_HOME}/internal-functions/"*".sh"; do
      # shellcheck source=../internal-functions/*.sh
      source "$f"
  done
fi

##########END ICA-ICA-LAZY SETUP ####################################


# Check ICA_BASE_URL env var is set
if [[ -z "${ICA_BASE_URL-}" ]]; then
  echo_stderr "Please set ICA_BASE_URL"
  print_help
  exit 1
fi

# Check we're in a project context
if [[ -z "${ICA_ACCESS_TOKEN-}" ]]; then
  echo_stderr "Please specify ICA_ACCESS_TOKEN"
  print_help
  exit 1
fi

# Make sure workflow run id is defined
if [[ -z "${ica_workflow_run_id}" ]]; then
  echo_stderr "Please specify --ica-workflow-run-id"
  print_help
  exit 1
fi

# Check token expiry
check_token_expiry "${ICA_ACCESS_TOKEN}"

# Get workflow history
workflow_run_history="$( \
  get_workflow_run_history \
    "${ica_workflow_run_id}" \
    "${ICA_BASE_URL}" \
    "${ICA_ACCESS_TOKEN}" \
)"

# Perform 'magical' jq
history_json_str="$(clean_history "${workflow_run_history}")"

# Do we need to continue, or just print out the history
if [[ "${include_hardware}" == "false" && "${include_docker_image}" == "false" && "${include_args}" == "false" ]]; then
  echo "${history_json_str}"
  exit 0
fi


get_includes_from_task_id(){
  : '
  Get args, docker image or hardware from task id
  '
  local task_id="$1"
  local include_args="$2"
  local include_docker_image="$3"
  local include_hardware="$4"

  curl \
      --fail \
      --silent \
      --location \
      --show-error \
      --request GET \
      --header "Authorization: Bearer ${ICA_ACCESS_TOKEN}" \
      "${ICA_BASE_URL}/v1/tasks/runs/${task_id}" | \
    jq --raw-output \
      --argjson "include_args" "${include_args}" \
      --argjson "include_docker_image" "${include_docker_image}" \
      --argjson "include_hardware" "${include_hardware}" \
      '
        . as $task_object |
        {
          "task_id": .id
        } |
        (
         if $include_args then
          . += {
            "args": ($task_object | .execution.args | tojson)
          } else
          .
         end
        ) |
        (
         if $include_docker_image then
          . += {
            "docker_image": ($task_object | .execution.image.name)
          } else
          .
         end
        ) |
        (
          if $include_hardware then
           . += {
             "hardware": (
               $task_object | .execution.environment.resources |
               {
                 "type": .type,
                 "size": .size,
                 "tier": .tier
               } |
               tojson
             )
           } else
           .
          end
        )
      '
}


readarray -t tasks_in_history_array <<< "$( \
    jq --raw-output --compact-output \
      '
        map(.task_id) |
        .[]
      ' <<< "${history_json_str}" \
  )"

(
  for task_id in "${tasks_in_history_array[@]}"; do
    get_includes_from_task_id \
      "${task_id}" \
      "${include_args}" \
      "${include_docker_image}" \
      "${include_hardware}"
  done
) | \
jq --slurp --raw-output \
  --argjson history_json_obj "${history_json_str}" \
  '
    INDEX($history_json_obj[]; .task_id) as $history_json_obj_index |
    JOIN($history_json_obj_index; .[]; .task_id; add)
  '

