#!/usr/bin/env bash

: '
Runs the illumination docker container over a given port (default 3000)
'

set -euo pipefail

#########
# GLOBALS
#########
DEFAULT_PORT="3000"
DEFAULT_SCOPE="read-only"

print_help(){
  echo "
  Usage ica-illumination (--project-name <project-name>) [--port 3000]

  Description:
    Run illumination for a project context on a localhost port (default 3000)

  Options:
    --project-name: Name of project context
    --port: Local host port (Default: 3000)

  Requirements:
    * jq
    * docker | podman
    * sed (gsed for MacOS users)
  "
}

check_binaries(){
  : '
  Make sure that jq / docker binaries exists in PATH
  '
  if ! (type "$(get_docker_binary)" jq "$(get_sed_binary)" 1>/dev/null); then
    return 1
  fi
}

run_illumination_docker(){
  : '
  Run the Illumination docker container
  '
  # Inputs
  ica_access_token="$1"
  port="$2"

  echo_stderr "Running illumination on port ${port}"
  # Run docker
  "$(get_docker_binary)" run \
    -it \
    --rm \
    --detach \
    --env "ICA_ACCESS_TOKEN=${ica_access_token}" \
    --env "PORT=${port}" \
    --publish "${port}:${port}" \
    "quay.io/umccr/illumination:latest"
}

# Inputs
port="${DEFAULT_PORT}"

while [ $# -gt 0 ]; do
    case "$1" in
        --project-name)
            project_name="$2"
            shift 1
        ;;
        --port)
            port="$2"
            shift 1
        ;;
        -h|--help)
            print_help
            exit 1
    esac
    shift
done

###########ICA-ICA-LAZY SETUP ########################################

if [[ -z "${ICA_ICA_LAZY_HOME-}" ]]; then
  echo "Error - please ensure env var 'ICA_ICA_LAZY_HOME' is set" 1>&2
  exit 1
fi

if [[ -d "${ICA_ICA_LAZY_HOME}/internal-functions" ]]; then
  for f in "${ICA_ICA_LAZY_HOME}/internal-functions/"*".sh"; do
      # shellcheck source=../internal-functions/*.sh
      source "$f"
  done
fi

##########END ICA-ICA-LAZY SETUP ####################################

# Check binaries
if ! check_binaries; then
  echo_stderr "Please make sure that jq and docker / podman are installed"
  exit 1
fi

# Check project name is defined
if [[ -z "${project_name-}" ]]; then
  echo_stderr "Error: Need to set --project-name var" 1>&2
  print_help
  exit 1
fi

# Check project name in TOKENS PATH
if [[ -z "$(jq --raw-output --arg project "${project_name}" 'select(.[$project] != null) | .[$project] | keys' <<< cat "$(get_tokens_path "${ICA_ICA_LAZY_HOME}")")" ]]; then
  echo_stderr "Error: Could not get project '${project_name}' from tokens path"
  exit 1
fi

# Get access token
project_access_token="$(get_access_token "${project_name}" "${DEFAULT_SCOPE}" "$(get_tokens_path "${ICA_ICA_LAZY_HOME}")")"

# Try admin scope
if [[ -z "${project_access_token}" || "${project_access_token}" == "null" ]]; then
  project_access_token="$(get_access_token "${project_name}" "admin" "$(get_tokens_path "${ICA_ICA_LAZY_HOME}")")"
fi


if [[ -z "${project_access_token}" || "${project_access_token}" == "null" ]]; then
  echo_stderr "Error: Could not get access token for project \"${project_name}\" with scope \"${DEFAULT_SCOPE}\""
  echo_stderr "Error: Please first run 'ica-add-access-token --project-name \"${project_name}\" --scope \"${DEFAULT_SCOPE}\""
  exit 1
fi

# Check token expiry
check_token_expiry "${project_access_token}"

# Check docker is running
if ! "$(get_docker_binary)" ps >/dev/null; then
  echo_stderr "Error: could not confirm that $(get_docker_binary) was running correctly, exiting"
  exit 1
fi

port="$(check_port_not_in_use "${port}")"

# Run illumination
docker_id="$(run_illumination_docker "${project_access_token}" "${port}")"

# Check id
if [[ -z "${docker_id}" ]]; then
  echo_stderr "Error: Could not get $(get_docker_binary) container id"
  exit 1
fi

echo_stderr "Docker launched Illumination successfully"
echo_stderr "Please head to localhost://${port} on your preferred browser"

docker_name="$("$(get_docker_binary)" container inspect "${docker_id}" | jq --raw-output '.[0].Name' | "$(get_sed_binary)" 's%^\/%%')"

echo_stderr "To stop the container, please run '$(get_docker_binary) kill \"${docker_name}\"'"

if [[ -n "${BROWSER-}" ]]; then
  echo_stderr "${BROWSER} environment variable is set. Opening up 'localhost://${port}'"
  ${BROWSER} "http://localhost:${port}"
fi