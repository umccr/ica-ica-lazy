#!/usr/bin/env bash

: '
Runs the illumination docker container over a given port (default 3000)
'

set -euo pipefail

#########
# GLOBALS
#########
DEFAULT_PORT="3000"
DEFAULT_SCOPE="read-only"
TOKENS_PATH="$HOME/.ica-ica-lazy/tokens/tokens.json"
SECONDS_PER_WEEK="604800"

echo_stderr(){
  echo "$@" 1>&2
}

print_help(){
  echo "
  Usage ica-illumination (--project-name <project-name>) [--port 3000]

  Description:
    Run illumination for a project context on a localhost port (default 3000)

  Options:
    --project-name: Name of project context
    --port: Local host port (Default: 3000)

  Requirements:
    * jq
    * docker | podman
    * sed (gsed for MacOS users)
  "
}

get_sed_command(){
  if [[ "${OSTYPE}" == "darwin"* ]]; then
    echo "gsed"
  else
    echo "sed"
  fi
}

get_docker_binary(){
  if type docker 1>/dev/null 2>&1; then
    echo "docker"
  else
    echo "podman"
  fi
}

get_epoch_expiry(){
  : '
  Get the epoch value of the expiry date of the tokens
  '
  local access_token="$1"

  echo "${access_token}" | \
    "$(get_sed_command)" -r 's/^(\S+)\.(\S+)\.(\S+)$/\2/' | \
    ( base64 \
        --decode 2>/dev/null || true ) | \
    jq -r '.exp'
}

get_seconds_to_expiry(){
  : '
  Get seconds to expiry based on epoch time
  '
  local expiry_epoch="$1"
  bc <<< "${expiry_epoch} - $(date +%s)"
}

check_port_not_in_use(){
  : '
  Check port not in use
  '

  # Check port doesn't have an existing container running on it
  iterable=0
  max_iterable=10

  while :; do
    # Don't go through an infinite loop!
    iterable=$(("${iterable}" + 1))
    if [[ "${iterable}" -ge "${max_iterable}" ]]; then
      echo_stderr "Tried 10 ports, all of them are full!"
      exit 1
    fi

    # Check if port is in use - podman doesn't support the --publish filter
    if [[ "$(get_docker_binary)" == "docker" && "$(docker ps --filter publish="${port}" --quiet | wc -l)" == 0 ]]; then
      # Port not in use!
      break
    elif [[ "$(get_docker_binary)" == "podman" && "$(podman ps --format "{{.Ports}}" | sed -r 's%^[0-9|\.]+\:([0-9]+)->[0-9]+\/tcp$%\1%' | grep -c "^${port}$")" == 0 ]]; then
      # Port not in use!
      break
    fi

    # Iterate port by one
    echo_stderr "Port ${port} in use, trying $(("${port}" + 1))"
    port="$(("${port}" + 1))"
  done

  echo "${port}"
}

warn_time_to_expiry(){
  : '
  Convert the epoch time to expiry to a readable date format
  '
  local expiry_in_seconds="$1"

  python3 -c "from datetime import timedelta; from sys import stderr; \
              time_to_expiry=timedelta(seconds=${expiry_in_seconds}); \
              d = {'days': time_to_expiry.days}; \
              d['hours'], rem = divmod(time_to_expiry.seconds, 3600); \
              d['minutes'], d['seconds'] = divmod(rem, 60); \
              print('Expired') if ${expiry_in_seconds} < 0 \
              else print(f\"Warning: Your ica access token will end in {d['days']} days, {d['hours']} hours, {d['minutes']} minutes, {d['seconds']} seconds\", file=stderr)"
}

## Checkers
check_token_expiry(){
  : '
  Return the expiry in printable format
  '
  # Inputs
  local access_token="$1"

  # local vars
  local epoch_expiry
  local seconds_to_expiry

  # Get the JWT token expiry time
  epoch_expiry="$(get_epoch_expiry "${access_token}")"

  # Compare expiry to current time
  seconds_to_expiry="$(get_seconds_to_expiry "${epoch_expiry}")"

  # Check token expiry
  if [[ "${seconds_to_expiry}" -le 0 ]]; then
    # Token has expired
    echo_stderr "Error - Your access token has expired! Please refresh with 'ica-add-access-token'"
    exit 1
  elif [[ "${seconds_to_expiry}" -le "${SECONDS_PER_WEEK}" ]]; then
    # Warn user token expires in less than a week
    echo_stderr "$(warn_time_to_expiry "${seconds_to_expiry}")"
  fi
}

get_access_token(){
  : '
  Check the level of the scope
  '
  # Func inputs
  local project_name="$1"
  local scope="$2"
  local tokens_file_path="$3"
  local in_json
  local project_access_token
  in_json="$(cat "${tokens_file_path}")"
  project_access_token="$(jq \
                            --raw-output \
                            --arg project_name "${project_name}" \
                            --arg scope "${scope}" \
                          '.[$project_name][$scope]' <<< "${in_json}")"
  echo "${project_access_token}"
}

check_binaries(){
  : '
  Make sure that jq / docker binaries exists in PATH
  '
  if ! (type "$(get_docker_binary)" jq "${sed_binary}" 1>/dev/null); then
    return 1
  fi
}

run_illumination_docker(){
  : '
  Run the Illumination docker container
  '
  # Inputs
  ica_access_token="$1"
  port="$2"

  echo_stderr "Running illumination on port ${port}"
  # Run docker
  "$(get_docker_binary)" run \
    -it \
    --rm \
    --detach \
    --env "ICA_ACCESS_TOKEN=${ica_access_token}" \
    --env "PORT=${port}" \
    --publish "${port}:${port}" \
    "quay.io/umccr/illumination:latest"
}

# Inputs
port="${DEFAULT_PORT}"

while [ $# -gt 0 ]; do
    case "$1" in
        --project-name)
            project_name="$2"
            shift 1
        ;;
        --port)
            port="$2"
            shift 1
        ;;
        -h|--help)
            print_help
            exit 1
    esac
    shift
done

# Get sed binary
if [[ "${OSTYPE}" == "darwin" ]]; then
  sed_binary="gsed"
else
  sed_binary="sed"
fi

# Check binaries
if ! check_binaries; then
  echo_stderr "Please make sure that jq and docker / podman are installed"
  exit 1
fi

# Check project name is defined
if [[ -z "${project_name-}" ]]; then
  echo_stderr "Error: Need to set --project-name var" 1>&2
  print_help
  exit 1
fi

# Check project name in TOKENS PATH
if [[ -z "$(jq --raw-output --arg project "${project_name}" 'select(.[$project] != null) | .[$project] | keys' <<< cat "${TOKENS_PATH}")" ]]; then
  echo_stderr "Error: Could not get project '${project_name}' from tokens path"
  exit 1
fi

# Get access token
project_access_token="$(get_access_token "${project_name}" "${DEFAULT_SCOPE}" "${TOKENS_PATH}")"

# Try admin scope
if [[ -z "${project_access_token}" || "${project_access_token}" == "null" ]]; then
  project_access_token="$(get_access_token "${project_name}" "admin" "${TOKENS_PATH}")"
fi


if [[ -z "${project_access_token}" || "${project_access_token}" == "null" ]]; then
  echo_stderr "Error: Could not get access token for project \"${project_name}\" with scope \"${DEFAULT_SCOPE}\""
  echo_stderr "Error: Please first run 'ica-add-access-token --project-name \"${project_name}\" --scope \"${DEFAULT_SCOPE}\""
  exit 1
fi

# Check token expiry
check_token_expiry "${project_access_token}"

# Check docker is running
if ! "$(get_docker_binary)" ps >/dev/null; then
  echo_stderr "Error: could not confirm that docker was running correctly, exiting"
  exit 1
fi

port="$(check_port_not_in_use "${port}")"

# Run illumination
docker_id="$(run_illumination_docker "${project_access_token}" "${port}")"

# Check id
if [[ -z "${docker_id}" ]]; then
  echo_stderr "Error: Could not get docker container id"
  exit 1
fi

echo_stderr "Docker launched Illumination successfully"
echo_stderr "Please head to localhost://${port} on your preferred browser"

docker_name="$("$(get_docker_binary)" container inspect "${docker_id}" | jq --raw-output '.[0].Name' | "${sed_binary}" 's%^\/%%')"

echo_stderr "To stop the container, please run 'docker kill \"${docker_name}\"'"

if [[ -n "${BROWSER}" ]]; then
  echo_stderr "${BROWSER} environment variable is set. Opening up 'localhost://${port}'"
  "${BROWSER}" "http://localhost:${port}"
fi