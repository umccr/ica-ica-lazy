#!/usr/bin/env bash

: '
Given a gds path as input, return the workflow run id that created the directory and the user that launched the workflow.
If thats not possible, just return the user that created directory, and when they created it
'

# Set to fail
set -euo pipefail

# Functions
# Help function
print_help(){
  echo "
        Usage: gds-blame (--gds-path gds://volume-name/path-to-folder/)

        Options:
            -g / --gds-path:  Required - Path to gds directory

        Requirements:
          * jq     (v1.5+)
          * python3 (v3.4+)
          * curl

        Environment:
          * ICA_BASE_URL
          * ICA_ACCESS_TOKEN
        "
}

binaries_check(){
  : '
  Check each of the required binaries are available
  '
  if ! (type jq python3 curl 1>/dev/null); then
    return 1
  fi
}

create_workflow_run_summary_header(){
  : '
  Create the workflow run summary header
  '
  local has_match="$1"

  if [[ "${has_match}" -ne "1" ]]; then
    echo "There has been at least one run id linked to this directory:"
  fi
}

# Get args
gds_path=""

# Get args from command line
while [ $# -gt 0 ]; do
  case "$1" in
    -g | --gds-path)
      gds_path="$2"
      shift 1
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
  esac
  shift 1
done

###########ICA-ICA-LAZY SETUP ########################################

if [[ -z "${ICA_ICA_LAZY_HOME-}" ]]; then
  echo "Error - please ensure env var 'ICA_ICA_LAZY_HOME' is set" 1>&2
  exit 1
fi

if [[ -d "${ICA_ICA_LAZY_HOME}/internal-functions" ]]; then
  for f in "${ICA_ICA_LAZY_HOME}/internal-functions/"*".sh"; do
      # shellcheck source=../internal-functions/*.sh
      source "$f"
  done
fi

##########END ICA-ICA-LAZY SETUP ####################################


# Ensure gds_path param is set
if [[ -z "${gds_path}" ]]; then
  echo_stderr "Please make sure --gds-path parameter is set"
  exit 1
fi

# Start
if [[ -z "${ICA_BASE_URL-}" ]]; then
    echo "Error: Need to set var \"ICA_BASE_URL\"" 1>&2
    exit 1
fi

if [[ -z "${ICA_ACCESS_TOKEN-}" ]]; then
    echo "Error: Need to set var \"ICA_ACCESS_TOKEN\"" 1>&2
    echo "Error: Please first run ica-context-switcher" 1>&2
    exit 1
fi

# Check token expiry
check_token_expiry "${ICA_ACCESS_TOKEN}"

if ! binaries_check; then
  exit 1
fi

# Get folder creator
# Get volume path from gds path
volume_name="$(get_volume_from_gds_path "${gds_path}")"
folder_path="$(get_folder_path_from_gds_path "${gds_path}")"
gds_path="gds://${volume_name}${folder_path}"  # Comes with trailing slash
if ! folder_id="$(get_folder_id "${volume_name}" "${folder_path}" "${ICA_BASE_URL}" "${ICA_ACCESS_TOKEN}")"; then
  echo_stderr "Error: Directory '${gds_path}' does not exist."
  exit 1
fi
# Show creator
creator_username="$(get_folder_creator_username "${folder_id}" "${ICA_BASE_URL}" "${ICA_ACCESS_TOKEN}")"

echo "The directory '${gds_path}' was created by user '${creator_username}'"
echo "Now checking if this directory was created by a workflow run."

# Read the array of workflow ids
readarray -t workflow_run_id_array < <(get_workflow_run_ids "${ICA_BASE_URL}" "${ICA_ACCESS_TOKEN}")

# We only print the header of 'this directory was created by the following workflow run ids if one present'
has_match=0

# Iterate through workflow ids, print matches for workflow ids that have an output directory or work directory attribute
# that are within the directory in question
workflow_run_counter=0
workflow_run_array_length="${#workflow_run_id_array[@]}"

for workflow_run_id in "${workflow_run_id_array[@]}"; do
  if [[ "$(( "${workflow_run_counter}" % "100" ))" == "0" && "${workflow_run_counter}" -ne "0" ]]; then
    echo_stderr "Looked through $((workflow_run_counter)) out of ${workflow_run_array_length} runs"
  fi
  workflow_run_counter="$((workflow_run_counter + 1))"
  # Get engine parameters
  engine_parameters="$(get_engine_parameters_from_workflow_id "${workflow_run_id}" "${ICA_BASE_URL}" "${ICA_ACCESS_TOKEN}")"

  # Get directories
  output_directory="$(jq --raw-output '.outputDirectory' <<< "${engine_parameters}")/"
  working_directory="$(jq --raw-output '.workDirectory' <<< "${engine_parameters}")/"

  # Now check if each directory is a subset
  if [[ "${gds_path}" == "${output_directory}" ]]; then
    create_workflow_run_summary_header "${has_match}"
    has_match=1
    echo "Input argument '${gds_path}' is the output directory of workflow '${workflow_run_id}'"
  elif [[ "${gds_path}" == "${output_directory}"* ]]; then
    create_workflow_run_summary_header "${has_match}"
    has_match=1
    echo "Workflow run '${workflow_run_id}' output directory is '${output_directory}' which is a parent of input argument '${gds_path}'"
  elif [[ "${output_directory}" == "${gds_path}"* ]]; then
    create_workflow_run_summary_header "${has_match}"
    has_match=1
    echo "Input argument '${gds_path}' is a parent of '${output_directory}' which is the output directory for run '${workflow_run_id}'"
  fi

  if [[ "${gds_path}" == "${working_directory}" ]]; then
    create_workflow_run_summary_header "${has_match}"
    has_match=1
    echo "Input argument '${gds_path}' is the working directory of workflow: '${workflow_run_id}'"
  elif [[ "${gds_path}" == "${working_directory}"* ]]; then
    create_workflow_run_summary_header "${has_match}"
    has_match=1
    echo "Workflow run '${workflow_run_id}' working directory is '${working_directory}' which is a parent of input argument '${gds_path}'"
  elif [[ "${working_directory}" == "${gds_path}"* ]]; then
    create_workflow_run_summary_header "${has_match}"
    has_match=1
    echo "Input argument '${gds_path}' is a parent of '${working_directory}' which is the output directory for run '${workflow_run_id}'"
  fi
done

if [[ "${has_match}" == "0" ]]; then
  echo "Could not find a workflow run id that may have created this folder"
fi
