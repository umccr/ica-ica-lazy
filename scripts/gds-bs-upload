#!/usr/bin/env bash

set -euo pipefail

: '
Run a TES task to upload a sequencing run to basespace
'

print_help(){
  echo "
Usage: gds-bs-upload (--gds-bssh-path gds://bssh-volume-name/Runs/path/to/run_folder/)
                     (--log-path gds://logs-volume-name/path/to/log/dir/)
                     [--instrument NovaSeq]
                     [--experiment-name RUN_ID]
                     [--sample-sheet-name SampleSheet.csv]
                     [--configuration bssh_auth_configuration_name]

Options:
  --gds-bssh-path        Required, path to sorted bam path that needs to be indexed
  --log-path             Required, path to log directory
  --instrument           Optional, the type of instrument used, defaults to NovaSeq
  --experiment-name      Optional, the name of the experiment, otherwise use the run id in the RunInfo.xml
  --sample-sheet-name:   Optional, the name of the SampleSheet inside the runs folder, defaults to SampleSheet.csv
  --help                 Optional, print this help message and exit

Requirements:
  * jq         (v1.5+)
  * python3 (v3.4+)
  * curl

Environment:
  * ICA_BASE_URL
  * ICA_ACCESS_TOKEN  (make sure you have administration permissions for this project context)
  * BASESPACE_API_SERVER  ( Optional, you may also specify the configuration if you have a ~/.basespace directory )
  * BASESPACE_ACCESS_TOKEN ( Optional, you may also specify the configuration if you have a ~/.basespace directory )
  "
}

binaries_check(){
  : '
  Check each of the required binaries are available
  '
  if ! (type jq yq curl 1>/dev/null); then
    return 1
  fi
}

# Known Instruments
KNOWN_INSTRUMENTS=( \
  "HiSeq1000" \
  "HiSeq1500" \
  "HiSeq2000" \
  "HiSeq2500" \
  "HiSeq3000" \
  "HiSeq4000" \
  "HiSeqX" \
  "NovaSeq5000" \
  "NovaSeq6000" \
  "NovaSeqX" \
  "NovaSeqXPlus" \
  "MiniSeq" \
  "MiSeq" \
  "MiSeqDx" \
  "NextSeq" \
  "NextSeqDx" \
  "NextSeq2000" \
  "iSeq100" \
)

# Globals
TEMPLATE_NAME="gds-bs-upload.json"

# Get args
gds_bssh_path=""
log_path=""
instrument="NovaSeq6000"
experiment_name=""
sample_sheet_name="SampleSheet.csv"
template_path="${ICA_ICA_LAZY_HOME-}/templates/${TEMPLATE_NAME}"

# Get args from command line
while [ $# -gt 0 ]; do
  case "$1" in
    --gds-bssh-path)
      gds_bssh_path="$2"
      shift 1
      ;;
    --sample-sheet-name)
      sample_sheet_name="$2"
      shift 1
      ;;
    --instrument)
      instrument="$2"
      shift 1
      ;;
    --experiment-name)
      experiment_name="$2"
      shift 1
      ;;
    --configuration)
      configuration="$2"
      shift 1
      ;;
    -l | --log-path)
      log_path="$2"
      shift 1
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
  esac
  shift 1
done

###########ICA-ICA-LAZY SETUP ########################################

if [[ -z "${ICA_ICA_LAZY_HOME-}" ]]; then
  echo "Error - please ensure env var 'ICA_ICA_LAZY_HOME' is set" 1>&2
  exit 1
fi

if [[ -d "${ICA_ICA_LAZY_HOME}/internal-functions" ]]; then
  for f in "${ICA_ICA_LAZY_HOME}/internal-functions/"*".sh"; do
      # shellcheck source=../internal-functions/*.sh
      source "$f"
  done
fi

##########END ICA-ICA-LAZY SETUP ####################################

# Ensure input / output params are set
if [[ -z "${gds_bssh_path-}" ]]; then
  echo_stderr "Please make sure --gds-bssh-path parameter is set"
  exit 1
fi

if [[ -z "${log_path-}" ]]; then
  echo_stderr "Please make sure --log-path parameter is set"
  exit 1
fi

# Check binaries
if ! binaries_check 1>/dev/null 2>&1; then
  echo_stderr "Error: Need to have jq, yq, curl installed"
  exit 1
fi

# Check instrument
if ! [[ " ${KNOWN_INSTRUMENTS[*]} " =~ ${instrument} ]]; then
  echo_stderr "Error: Instrument '${instrument}' is not a known instrument"
  exit 1
fi

# Start
if [[ -z "${ICA_BASE_URL-}" ]]; then
    echo_stderr "Error: Need to set var \"ICA_BASE_URL\""
    exit 1
fi

# Check access token
if [[ -z "${ICA_ACCESS_TOKEN-}" ]]; then
    echo_stderr "Error: Need to set var \"ICA_ACCESS_TOKEN\""
    exit 1
fi

if [[ -z "${BASESPACE_API_SERVER-}" && -z "${configuration-}" ]]; then
    echo_stderr "Error: Need to set var \"BASESPACE_API_SERVER\""
    exit 1
elif [[ -z "${BASESPACE_API_SERVER-}" && ! -r "${HOME}/.basespace/${configuration}.cfg" ]]; then
    echo_stderr "Could not find path to configuration file ${HOME}/.basespace/${configuration}.cfg"
    exit 1
elif [[ -z "${BASESPACE_API_SERVER-}" ]]; then
  if ! basespace_api_server="$( \
      sed \
        --regexp-extended \
        's%\s+=\s+%=%' \
        "${HOME}/.basespace/${configuration}.cfg" | \
      grep 'apiServer' | \
      cut -d'=' -f2
    )"; then
      echo_stderr "Could not collect api server from ${HOME}/.basespace/${configuration}.cfg"
      exit 1
    fi
else
  basespace_api_server="${BASESPACE_API_SERVER}"
fi

# Check access token
if [[ -z "${BASESPACE_ACCESS_TOKEN-}" && -z "${configuration-}" ]]; then
    echo_stderr "Error: Need to set var \"BASESPACE_ACCESS_TOKEN\""
    exit 1
elif [[ -z "${BASESPACE_ACCESS_TOKEN-}" && ! -r "${HOME}/.basespace/${configuration}.cfg" ]]; then
    echo_stderr "Could not find path to configuration file ${HOME}/.basespace/${configuration}.cfg"
    exit 1
elif [[ -z "${BASESPACE_ACCESS_TOKEN-}" ]]; then
  if ! basespace_access_token="$( \
    sed \
      --regexp-extended \
      's%\s+=\s+%=%' \
      "${HOME}/.basespace/${configuration}.cfg" | \
    grep 'accessToken' | \
    cut -d'=' -f2
  )"; then
    echo_stderr "Could not collect access token from ${HOME}/.basespace/${configuration}.cfg"
    exit 1
  fi
else
  basespace_access_token="${BASESPACE_ACCESS_TOKEN}"
fi

# Check gds file exists
gds_volume_name="$( \
  get_volume_from_gds_path \
    "${gds_bssh_path}" \
)"
gds_folder_path="$( \
  get_folder_path_from_gds_path \
    "${gds_bssh_path}" \
)"

if ! gds_folder_id="$( \
  get_folder_id \
    "${gds_volume_name}" \
    "${gds_folder_path}" \
    "${ICA_BASE_URL}" \
    "${ICA_ACCESS_TOKEN}" \
)"; then
  echo_stderr "Could not get folder id from '${gds_bssh_path}', please make sure the gds run exists and you have permissions to access this directory"
  exit 1
fi

if [[ -z "${gds_folder_id}" ]]; then
  echo_stderr "Could not get folder id from '${gds_bssh_path}', please make sure the gds run exists and you have permissions to access this directory"
  exit 1
fi

echo_stderr "Got the folder id for '${gds_bssh_path}' as '${gds_folder_id}'"

# Now check samplesheet path is also okay and exists
sample_sheet_path="${gds_folder_path%/}/${sample_sheet_name}"
if ! gds_samplesheet_file_id="$( \
  get_file_id \
    "${gds_volume_name}" \
    "${sample_sheet_path}" \
    "${ICA_BASE_URL}" \
    "${ICA_ACCESS_TOKEN}" \
)"; then
  echo_stderr "${sample_sheet_name}' does not exist in '${gds_bssh_path}'"
  exit 1
fi

if [[ -z "${gds_samplesheet_file_id}" ]]; then
  echo_stderr "${sample_sheet_name}' does not exist in '${gds_bssh_path}'"
fi

# Get experiment name if it doesn't exist
if [[ -z "${experiment_name}" ]]; then
  if ! experiment_name="$(
    gds-view \
      --gds-path "${gds_bssh_path%/}/RunInfo.xml" \
      --to-stdout | \
    yq \
      --input-format xml \
      --output-format json | \
    jq --raw-output \
      '.RunInfo.Run["+@Id"]' \
  )"; then
    echo_stderr "Could not get run id from RunInfo Xml at ${gds_bssh_path%/}/RunInfo.xml"
  fi
fi

# Populate template
temp_gds_bs_creation_tes_path="$("$(get_mktemp_binary)" -t "gds_bs_tes.XXX.json")"
cp "${template_path}" "${temp_gds_bs_creation_tes_path}"

"$(get_sed_binary)" \
  -i \
  "
    s#__BASESPACE_API_SERVER__#${basespace_api_server}#;
    s#__BASESPACE_ACCESS_TOKEN__#${basespace_access_token}#;
    s#__INPUT_RUN_NAME__#$(basename "${gds_folder_path}")#;
    s#__EXPERIMENT_NAME__#${experiment_name}#;
    s#__INSTRUMENT__#${instrument}#;
    s#__INPUT_RUN_GDS_PATH__#${gds_bssh_path}#;
    s#__SAMPLE_SHEET_NAME__#${sample_sheet_name}#;
    s#__GDS_SYSTEM_FILES_PATH__#${log_path%/}#;
  " \
  "${temp_gds_bs_creation_tes_path}"

# Launch TES task
echo_stderr "Launching bs upload TES task"
if tes_task_id="$( \
  curl \
    --silent \
    --fail \
    --location \
    --show-error \
    --request POST \
    --header 'Accept: application/json' \
    --header 'Content-Type: application/*+json' \
    --header "Authorization: Bearer ${ICA_ACCESS_TOKEN}" \
    --data "@${temp_gds_bs_creation_tes_path}" \
    --url "${ICA_BASE_URL}/v1/tasks/runs" |
  jq --raw-output '.id' \
)"; then
  # Successful task generation, can delete the local file
  rm "${temp_gds_bs_creation_tes_path}"
fi

echo_stderr "Launching bs runs upload with task run ${tes_task_id}"
echo_stderr "Once the bs runs upload is complete you may remove the log directory \"${log_path}\""
