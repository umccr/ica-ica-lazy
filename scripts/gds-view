#!/usr/bin/env bash

: '
Uses docker links to view the gds file through its presigned url
'

# Set to fail
set -euo pipefail

###########
# FUNCTIONS
###########

print_help(){
  echo "
        Usage: gds-view ( --gds-path gds://volume-name/path-to-file ) [ --to-stdout | --browser ]

        Options:
            -g / --gds-path: Path to gds file
            -s / --to-stdout: Print file to stdout
            -b / --browser: Open url in browser

        Requirements:
          * docker | podman
          * jq
          * python3
          * wget

        Environment:
          * ICA_BASE_URL
          * ICA_ACCESS_TOKEN
          * BROWSER (only if --browser is set) should point to absolute path to the FireFox executable

        The program runs the links binary through docker to
        the gds path via a presigned url.  This can be used on text files and even gzipped files!
        Use --to-stdout to print the file to stdout, or --browser to open up the file in your browser.
        "
}

run_links(){
  : '
  Runs the links container
  '
  local presigned_url="$1"
  # Send through to links
  "$(get_docker_binary)" run \
    --rm \
    -it \
    --entrypoint "links" \
    ghcr.io/umccr/alpine-links:2.21 \
    	"${presigned_url}"
}

# Inputs
gds_path=""
access_token="${ICA_ACCESS_TOKEN-}"
base_url="${ICA_BASE_URL-}"
to_stdout="false"
browser="false"

while [ $# -gt 0 ]; do
    case "$1" in
        -g|--gds-path)
            gds_path="$2"
            shift 1
        ;;
        -s|--to-stdout)
            to_stdout="true"
        ;;
        -b|--browser)
            browser="true"
        ;;
        -h|--help)
            print_help
            exit 1
    esac
    shift
done

###########ICA-ICA-LAZY SETUP ########################################

if [[ -z "${ICA_ICA_LAZY_HOME-}" ]]; then
  echo "Error - please ensure env var 'ICA_ICA_LAZY_HOME' is set" 1>&2
  exit 1
fi

if [[ -d "${ICA_ICA_LAZY_HOME}/internal-functions" ]]; then
  for f in "${ICA_ICA_LAZY_HOME}/internal-functions/"*".sh"; do
      # shellcheck source=../internal-functions/*.sh
      source "$f"
  done
fi

##########END ICA-ICA-LAZY SETUP ####################################

# Checks, ensure access_token is set
if [[ -z "${access_token}" ]]; then
  echo "Error: Need to set ICA_ACCESS_TOKEN env var" 1>&2
  echo "Error: Please first run ica-context-switcher" 1>&2
  print_help
  exit 1
elif [[ -z "${base_url}" ]]; then
  echo_stderr "Error: Please set the env var ICA_BASE_URL"
  print_help
  exit 1
else
  # Check token expiry
  check_token_expiry "${access_token}"
fi

# Get volume name / get file path from gds path
volume_name="$(get_volume_from_gds_path "${gds_path}")"
file_path="$(get_file_path_from_gds_path "${gds_path}")"

# Collect file id
file_id="$(get_file_id "${volume_name}" "${file_path}" "${base_url}" "${access_token}")"

# Collect presigned url
presigned_url="$(get_presigned_url_from_file_id "${file_id}" "${base_url}" "${access_token}")"

# Present file
if [[ "${to_stdout}" == "true" ]]; then
  # Print to stdout
  wget --output-document - "${presigned_url}" 2>/dev/null
  # Check if we're in a pipe or not
  if [ -t 1 ]; then
    # If we're running in terminal, we want the user to have their console back
    echo ""
  fi
elif [[ "${browser}" == "true" ]]; then
  if [[ -z "${BROWSER-}" ]]; then
    echo_stderr "Error: --browser selected but 'BROWSER' env var is not set"
    exit 1
  fi
  ${BROWSER} "${presigned_url}"
else
  # Run links through docker
  run_links "${presigned_url}"
fi