#!/usr/bin/env bash

: '
Show all the tokens in ~/.ica-ica-lazy/tokens/tokens.json
'

### FUNCTIONS ###


check_binaries(){
  : '
  Make sure that  jq / python3 readarray / sed / printf binary exists in PATH
  '
  if ! (type jq python3 readarray "$(get_sed_binary)" "$(get_printf_binary)" 1>/dev/null); then
    return 1
  fi
}

print_help(){
  echo "
        Usage: ica-show-tokens

        Options:
            -h / --help: Print this help command

        Requirements:
          * jq
          * python3
          * sed  (macos users to install gsed through 'brew install gnu-sed')
          * printf (macos users to install gprintf through 'brew install coreutils')

        Show all of the tokens stored in '$HOME/.ica-ica-lazy/tokens/tokens.json'
        "
}

# Globals

# Print help, maybe?
while [ $# -gt 0 ]; do
    case "$1" in
        -h|--help)
            print_help
            exit 1
    esac
    shift
done

###########ICA-ICA-LAZY SETUP ########################################

if [[ -z "${ICA_ICA_LAZY_HOME-}" ]]; then
  echo "Error - please ensure env var 'ICA_ICA_LAZY_HOME' is set" 1>&2
  exit 1
fi

if [[ -d "${ICA_ICA_LAZY_HOME}/internal-functions" ]]; then
  for f in "${ICA_ICA_LAZY_HOME}/internal-functions/"*".sh"; do
      # shellcheck source=../internal-functions/*.sh
      source "$f"
  done
fi

##########END ICA-ICA-LAZY SETUP ####################################

# Check binaries
if ! check_binaries; then
  echo_stderr "Please make sure binaries jq, python3, readarray, $(get_sed_binary) $(get_printf_binary) are all available on your PATH variable"
  print_help
  exit 1
fi

# Iterate through each project and then each scope

# Initialise column arrays
print_project_array=()
print_scope_array=()
print_expiry_array=()

# Get project array
readarray -t projects_array < <(jq --raw-output --compact-output 'keys[]' <<< cat "$(get_tokens_path "${ICA_ICA_LAZY_HOME}")")

# Iterate through projects
for project in "${projects_array[@]}"; do
    # Get scopes
    readarray -t scopes_array < <(jq --raw-output --compact-output --arg "project" "${project}" '.[$project] | keys[]' <<< cat "$(get_tokens_path "${ICA_ICA_LAZY_HOME}")")
    # Iterate through scopes
    for scope in "${scopes_array[@]}"; do
      # Get token scope
      project_scope_token="$(jq --raw-output --arg "project" "$project" --arg "scope" "$scope" '.[$project][$scope]' <<< cat "$(get_tokens_path "${ICA_ICA_LAZY_HOME}")")"
      # Get arrays
      print_project_array+=("${project}")
      print_scope_array+=("${scope}")
      print_expiry_array+=("$(get_print_time_to_expiry_from_access_token "${project_scope_token}")")
    done
done

# Get number of rows
n_rows="${#print_project_array[@]}"

# Print through 'column'
(
  # Print header
  "$(get_printf_binary)" "PROJECT#SCOPE#EXPIRY\n"
  # Iterate through each elements and print the row-element for each 'column array'
  for i in $(eval "echo {0..$(bc <<< "$n_rows - 1")}"); do
    "$(get_printf_binary)" "%s#%s#%s\n" "${print_project_array[$i]}" "${print_scope_array[$i]}" "${print_expiry_array[$i]}"
  done
) | column -s'#' -c4 -t
