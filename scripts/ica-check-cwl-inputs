#!/usr/bin/env bash

: '
Given an input json checks the following

input is present
name is present
check if engineParameters is present - encourage user to use if not present

Much credit to this snippet for flattening arrays in jq
https://gist.github.com/olih/f7437fb6962fb3ee9fe95bda8d2c8fa4#gistcomment-3045352
'

### GLOBALS
SECONDS_PER_WEEK="604800"

echo_stderr(){
  echo "${@}" 1>&2
}

flatten_inputs(){
  : '
  Get the flattened inputs object as a . based flattened output
  '
  jq --raw-output '[
         . as $in |
         (paths(scalars), paths((. | length == 0)?)) |
         join(".") as $key |
         $key + "=" + ($in | getpath($key | split(".") | map((. | tonumber)? // .)) | tostring)
       ] |
       sort |
       .[]' <<< "$1"
}

get_sed_command(){
  if [[ "${OSTYPE}" == "darwin"* ]]; then
    echo "gsed"
  else
    echo "sed"
  fi
}

get_epoch_expiry(){
  : '
  Get the epoch value of the expiry date of the tokens
  '
  local access_token="$1"
  echo "${access_token}" | \
    "$(get_sed_command)" -r 's/^(\S+)\.(\S+)\.(\S+)$/\2/' | \
    ( base64 -d 2>/dev/null || true ) | \
    jq -r '.exp'
}

get_seconds_to_expiry(){
  : '
  Get seconds to expiry based on epoch time
  '
  local expiry_epoch="$1"
  bc <<< "${expiry_epoch} - $(date +%s)"
}

warn_time_to_expiry(){
  : '
  Convert the epoch time to expiry to a readable date format
  '
  local expiry_in_seconds="$1"

  python3 -c "from datetime import timedelta; from sys import stderr; \
              time_to_expiry=timedelta(seconds=${expiry_in_seconds}); \
              d = {'days': time_to_expiry.days}; \
              d['hours'], rem = divmod(time_to_expiry.seconds, 3600); \
              d['minutes'], d['seconds'] = divmod(rem, 60); \
              print('Expired') if ${expiry_in_seconds} < 0 \
              else print(f\"Warning: Your ica access token will end in {d['days']} days, {d['hours']} hours, {d['minutes']} minutes, {d['seconds']} seconds\", file=stderr)"
}

## Checkers
check_token_expiry(){
  : '
  Return the expiry in printable format
  '
  # Inputs
  local access_token="$1"

  # local vars
  local epoch_expiry
  local seconds_to_expiry

  # Get the JWT token expiry time
  epoch_expiry="$(get_epoch_expiry "${access_token}")"

  # Compare expiry to current time
  seconds_to_expiry="$(get_seconds_to_expiry "${epoch_expiry}")"

  # Check token expiry
  if [[ "${seconds_to_expiry}" -le 0 ]]; then
    # Token has expired
    echo_stderr "Error - Your access token has expired! Please refresh with 'ica-add-access-token'"
    exit 1
  elif [[ "${seconds_to_expiry}" -le "${SECONDS_PER_WEEK}" ]]; then
    # Warn user token expires in less than a week
    echo_stderr "$(warn_time_to_expiry "${seconds_to_expiry}")"
  fi
}

get_definition_from_ica(){
  : '
  Use curl to pull down the packed cwl defintion of the workflow
  '

  local ica_workflow_id="$1"
  local ica_workflow_version_name="$2"
  local ica_base_url="$3"
  local ica_access_token="$4"
  curl \
    --silent \
    --request GET \
    --header "Authorization: Bearer ${ica_access_token}" \
    "${ica_base_url}/v1/workflows/${ica_workflow_id}/versions/${ica_workflow_version_name}" |
  jq \
    --raw-output \
    '.definition | fromjson'
}

get_inputs_from_cwl_definition(){
  : '
    Get the inputs objects from the cwl definition object
    First we split by type packed workflows use graphs and
    have the inputs in the last element of the graph array
    commandlinetools just have the inputs in the top key
    we then strip out the "#" from the id.
    if the "id" is not set on the on the cwltool it will have a "main/" prefix, which we strip out
  '

  local packed_cwl_definition="$1"

  jq --raw-output '(
         if (.["$graph"] | length) !=0 then
             .["$graph"][-1]
         else
             .
         end) |
         .inputs[]' <<< "${packed_cwl_definition}"
}

get_input_block_from_input_name(){
  : '
  Get the input chunk from the input name - matches on id
  '
  # Get inputs
  local input_name="$1"
  local input_json="$2"

  jq --raw-output \
    --arg input_name "${input_name}" \
    'select(.id == ("#" + $input_name) or .id == ("#/main" + $input_name))' <<< "${input_json}"
}

is_input_required(){
  : '
  Given an input chunk, determine it is required
  echo "false" if not required
  echo "true" if required
  '
  # Get inputs
  local input_chunk="$1"

  # Input is optional if type attribute is an array and "null" is in the type array
  jq --raw-output \
      'if ((.type | type == "array") and (.type | any("null"))) then
          "false"
      else
          "true"
      end' <<< "${input_chunk}"
}

get_id_from_input_chunk(){
  : '
  Given an input collect the id and remove the "#" and the "/main" attributes
  '
  local input_chunk="$1"

  jq --raw-output \
    '.id | sub("^#"; "") | sub("^main/"; "")' <<< "${input_chunk}"

}

get_required_inputs_list(){
  : '
  Get a chunk of inputs that are required for the workflow
  '

  # Use nameref
  local -n temp_required_inputs_array="$1"
  local input_json="$2"
  local input_chunks_array
  local input_id

  readarray -t input_chunks_array < <(jq --raw-output --compact-output <<< "${input_json}")

  # Iterate over the input ids, if input is required, then append the id to true
  for input_chunk in "${input_chunks_array[@]}"; do
    input_id="$(get_id_from_input_chunk "${input_chunk}")"
    if [[ "$(is_input_required "${input_chunk}")" == "true" ]]; then
      temp_required_inputs_array+=("${input_id}")
    fi
  done
}

get_sed_command(){
  if [[ "${OSTYPE}" == "darwin"* ]]; then
    echo "gsed"
  else
    echo "sed"
  fi
}

# Get volume from gds path
get_volume_from_gds_path() {
  : '
  Assumes urllib is available on python3
  '
  local gds_path="$1"

  # Returns the netloc attribute of the gds_path
  python3 -c "from urllib.parse import urlparse; print(urlparse(\"${gds_path}\").netloc)"
}

# Get folder path
get_folder_path_from_gds_path() {
  : '
  Assumes urllib is available on python3
  '
  local gds_path="$1"

  # Returns the path attribute of gds_path input
  python3 -c "from urllib.parse import urlparse; from pathlib import Path; print(str(Path(urlparse(\"${gds_path}\").path)).rstrip(\"/\") + \"/\")"
}

get_file_path_from_gds_path(){
  : '
  Assumes urllib is available on python3
  '
  local gds_path="$1"
  # Returns the path attribute of gds_path input
  python3 -c "from urllib.parse import urlparse; print(urlparse(\"${gds_path}\").path)"
}


check_folder_exists(){
  : '
  Check that the input folder exists
  folder checking is a little more complex than file checking, need to run an ica folders list on the folder itself and
  then get the folder id
  # TODO - test this bit
  '
  local input_key_stripped="$1"
  local input_value="$2"
  local ica_access_token="$3"
  local ica_base_url="$4"
  local volume_name
  local folder_path

  volume_name="$(get_volume_from_gds_path "${input_value}")"
  folder_path="$(get_folder_path_from_gds_path "${input_value}")"

  # Return the folder id
  folder_id="$(curl \
                 --silent \
                 --request GET \
                 --header "Authorization: Bearer ${ica_access_token}" \
                 "${ica_base_url}/v1/folders?volume.name=${volume_name}&path=${folder_path}" |
               jq \
                 --raw-output \
                 '.items[] | .id')"

  if [[ -z "${folder_id}" || "${folder_id}" == "null" ]]; then
    echo_stderr "Could not get folder id for \"${input_value}\""
    return 1
  fi
}

check_file_exists(){
  : '
  Check that the input file exists
  '
  local input_key_stripped="$1"
  local input_value="$2"
  local ica_access_token="$3"
  local ica_base_url="$4"
  local volume_name
  local file_path

  volume_name="$(get_volume_from_gds_path "${input_value}")"
  file_path="$(get_file_path_from_gds_path "${input_value}")"

  # Return the folder id
  file_id="$(curl \
                 --silent \
                 --request GET \
                 --header "Authorization: Bearer ${ica_access_token}" \
                 "${ica_base_url}/v1/files?volume.name=${volume_name}&path=${file_path}" |
               jq \
                 --raw-output \
                 '.items[] | .id')"

  if [[ -z "${file_id}" || "${file_id}" == "null" ]]; then
    echo_stderr "Could not get file id for \"${input_value}\""
    return 1
  fi
}

get_class_type(){
  : '
  Get the class type, iterate over flattened inputs, get value of "input_key_stripped"."class"
  '
  local input_key_stripped="$1"
  local flattened_inputs="$2"

  while read -r input_key_val_pair; do
     # Split into keys and values
     input_key="$(cut -d'=' -f1 <<< "${input_key_val_pair}")"
     input_value="$(cut -d'=' -f2 <<< "${input_key_val_pair}")"

     # Get the input value
     if [[ "${input_key}" == "${input_key_stripped}.class" ]]; then
       if [[ "${input_value,,}" == "file"  || "${input_value,,}" == "directory" ]]; then
         # ,, syntax means .tolower()
         echo "gds_${input_value,,}"
       fi
     fi
  done <<< "${flattened_inputs}"
}

strip_first_period(){
  : '
  Equivalent of split(".", 1)[0] in python
  '
  local input_key="$1"
  cut -d'.' -f1 <<< "${input_key}"
}

strip_last_period(){
  : '
  Equivalent of rsplit(".", 1)[0] in python
  '
  local input_key="$1"
  # This is gross, I am sorry
  # sed is greedy, so the first (.*) will match as much as it can
  "$(get_sed_command)" -r "s/(.*)\.(.*)/\1/" <<< "${input_key}"
}

delete_item_from_array(){
  : '
  Delete an item from array
  '
  local -n input_array="$1"
  local input_value="$2"
  local input_del_array=( "${input_value}" )

  for target in "${input_del_array[@]}"; do
    for i in "${!input_array[@]}"; do
      if [[ "${input_array[${i}]}" == "${target}" ]]; then
        unset "input_array[${i}]"
      fi
    done
  done
}

check_name_value(){
  : '
  Check name value
  '
  local name_value="$1"

  if [[ "${name_value}" =~ [^a-zA-Z0-9_-\.] ]]; then
    echo_stderr "Name must be a-zA-Z0-9_-, please don't put in spaces or symbols"
    return 1
  fi
}

check_input_paths_and_locations(){
  : '
  Iterate through inputs, make sure each gds path exists in this context
  '
  local flattened_inputs="$1"
  local ica_workflow_inputs="$2"
  local ica_base_url="$3"
  local ica_access_token="$4"
  local original_required_inputs_array_length
  local all_there=0  # Is everything present?
  local input_key
  local input_key_lstripped
  local input_key_rstripped
  local input_value
  local input_block
  # Assigned in get_required_inputs_list
  # Uses some nameref magic as shown here: https://stackoverflow.com/questions/10582763/how-to-return-an-array-in-bash-without-using-globals
  local required_inputs_array

  # Get required array
  if [[ -n "${ica_workflow_inputs}" ]]; then
    get_required_inputs_list required_inputs_array "${ica_workflow_inputs}"
    original_required_inputs_array_length="${#required_inputs_array[@]}"
  fi

  echo_stderr "Ensuring that all required inputs are present: " "${required_inputs_array[@]}"

  # Iterate through key val pairs
  # Like tumor_fastq_list_rows.0.read_1.location=gds://...
  while read -r input_key_val_pair; do
     # Split into keys and values
     input_key="$(cut -d'=' -f1 <<< "${input_key_val_pair}")"
     # Stripp input key to just get first elmeent umccrise_tsv_rows.0.sv_vcf.path to umccrise_tsv_rows
     input_key_lstripped="$(strip_first_period "${input_key}")"
     # Stripped input key umccrise_tsv_rows.0.sv_vcf.path to just umccrise_tsv_rows.0.sv_vcf
     input_key_rstripped="$(strip_last_period "${input_key}")"
     input_value="$(cut -d'=' -f2 <<< "${input_key_val_pair}")"

     # Check if is part of the inputs?
     if [[ -n "${ica_workflow_inputs}" ]]; then
       input_block="$(get_input_block_from_input_name "${input_key_lstripped}" "${ica_workflow_inputs}")"

       # Check input block is present
       if [[ -z "${input_block}" ]]; then
         echo_stderr "Error! '${input_key}' is not a recognised input of the workflow"
         all_there=1
       fi

       # Remove an element from the array
       # As shown here: https://stackoverflow.com/questions/16860877/remove-an-element-from-a-bash-array
       delete_item_from_array required_inputs_array "${input_key_lstripped}"
     fi

     # Check if the input-key ends in .path or .location
     if [[ "${input_key}" =~ .*\.path || "${input_key}" =~ .*\.location ]]; then
       # Get class type
       class_type="$(get_class_type "${input_key_rstripped}" "${flattened_inputs}")"

       # If a directory, make sure it exists
       if [[ "${class_type}" == "gds_directory" ]]; then
         echo_stderr "Input '${input_key}' is a gds directory at '${input_value}', checking it's present."
         if ! check_folder_exists "${input_key_rstripped}" "${input_value}" "${ica_access_token}" "${ica_base_url}"; then
           echo_stderr "Error! Could not find gds directory '${input_value}' for input '${input_key_rstripped}'"
           all_there=1
         fi
       # If a file, make sure it exists
       elif [[ "${class_type}" == "gds_file" ]]; then
        echo_stderr "Input '${input_key}' is a gds file at '${input_value}' checking it's present."
         if ! check_file_exists "${input_key_rstripped}" "${input_value}" "${ica_access_token}" "${ica_base_url}"; then
           echo_stderr "Error! Could not find gds file '${input_value}' for input '${input_key_rstripped}'"
           all_there=1
         fi
       fi
     fi
  done <<< "${flattened_inputs}"

  # Get length of the required input array
  if [[ -n "${ica_workflow_inputs}" && "${original_required_inputs_array_length}" != 0 && "${#required_inputs_array[@]}" != "0" ]]; then
    echo_stderr "Error! Some required inputs are not satisfied"
    echo_stderr "Error! The following inputs could not be found in the input.json: " "${required_inputs_array[@]}"
    return 1
  fi

  # Return 1 if not all inputs are present on gds otherwise return 0
  if [[ "${all_there}" == 1 ]]; then
    return 1
  else
    return 0
  fi
}


check_input_value(){
  : '
  Check input value
  '
  local inputs="$1"
  local ica_workflow_inputs="$2"
  local ica_base_url="$3"
  local ica_access_token="$4"

  # Check if inputs are null
  if [[ -z "${inputs}" || "${inputs}" == "null" ]]; then
    echo_stderr "Could not find any inputs, under 'input'. Are you sure you want this?"
    return 0
  fi

  # Flatten input json into .dot format
  flattened_inputs="$(flatten_inputs "${inputs}")"

  # Check paths are present on gds and match input ids in definition on ICA if ica_workflow_inputs is defined
  check_input_paths_and_locations "${flattened_inputs}" "${ica_workflow_inputs}" "${ica_base_url}" "${ica_access_token}"
}

check_engine_parameters(){
  : '
  Check the engine parameters
  '
  local engine_parameters="$1"

  # Check if inputs are null
  if [[ -z "${engine_parameters}" || "${engine_parameters}" == "null" || "$(jq 'keys | length' <<< "${engine_parameters}")" == "0" ]]; then
    echo_stderr "Could not find any engine parameters, under 'engineParameters'"
    echo_stderr "For future runs, I would recommend setting outputDirectory and workDirectory."
  fi

  return 0
}

print_help(){
  echo "
  Usage ica-check-cwl-inputs (--input-json <json-file>)
                             [--ica-workflow-id <ica-workflow-id>]
                             [--ica-workflow-version-name <ica-workflow-version-name>]

  Description:
    Validates your input json and makes sure all inputs of type File and Directory are readable on GDS.

    Given the --ica-workflow-id and --ica-workflow-version-name, one can also make sure that the input key names
    match the ids of the ICA definition AND make sure all of the required inputs are present in the input json.

  Options:
    -i / --input-json: The input json file you wish to analyse
    -w / --ica-workflow-id: The ICA workflow ID you would like to check against
    -v / --ica-workflow-version-name: The ICA workflow version name you would like to check against.

  Requirements:
    * curl
    * jq
    * python3
    * sed (gnutls)

  Environment variables:
    * ICA_ACCESS_TOKEN
    * ICA_BASE_URL
  "
}

######
# ARGS
######

# Get args from the command line
input_json=""
ica_workflow_id=""
ica_workflow_version_name=""

# Get args from command line
while [ $# -gt 0 ]; do
  case "$1" in
    -i | --input-json)
      input_json="$2"
      shift 1
      ;;
    -w | --ica-workflow-id)
      ica_workflow_id="$2"
      shift 1
      ;;
    -v | --ica-workflow-version-name)
      ica_workflow_version_name="$2"
      shift 1
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
  esac
  shift 1
done

# Check ICA_BASE_URL env var is set
if [[ -z "${ICA_BASE_URL-}" ]]; then
  echo_stderr "Please set ICA_BASE_URL"
  print_help
  exit 1
fi

# Check we're in a project context
if [[ -z "${ICA_ACCESS_TOKEN-}" ]]; then
  echo_stderr "Please specify ICA_ACCESS_TOKEN"
  print_help
  exit 1
fi

# Make sure input_json is defined and is a file
if [[ -z "${input_json}" ]]; then
  echo_stderr "Please specify --input-json"
  print_help
  exit 1
elif [[ ! -f "${input_json}" ]]; then
  echo_stderr "--input-json specified as ${input_json} but could not find file."
  print_help
  exit 1
fi

# Check token expiry
check_token_expiry "${ICA_ACCESS_TOKEN}"

# Check either none or both of ica-workflow-id and ica-workflow-version-name are defined
if [[ -n "${ica_workflow_id}" && -n "${ica_workflow_version_name}" ]]; then
  echo_stderr "--ica-workflow-id and --ica-workflow-version-name are defined, getting inputs from definition"

  # Get the definition
  ica_workflow_definition="$(get_definition_from_ica "${ica_workflow_id}" "${ica_workflow_version_name}" "${ICA_BASE_URL}" "${ICA_ACCESS_TOKEN}")"

  # Check definition was pulled correctly
  if [[ -z "${ica_workflow_definition}" || "${ica_workflow_definition}" == "null" ]]; then
    echo_stderr "Error! Workflow ${ica_workflow_id}/${ica_workflow_version_name} could not be found"
    echo_stderr "Are you sure the id and version are correct and you're in the correct project context?"
    exit 1
  fi

  # Get the inputs from the definition
  ica_workflow_inputs="$(get_inputs_from_cwl_definition "${ica_workflow_definition}")"

# Both aren't defined, make sure user hasn't tried to use one of them
elif [[ ( -z "${ica_workflow_id}" && -n "${ica_workflow_version_name}" ) || ( -n "${ica_workflow_id}" && -z "${ica_workflow_version_name}" ) ]]; then
  echo_stderr "You must define none or both of --ica-workflow-id and --ica-workflow-version-name"
  print_help
  exit 1

fi

# Check json integrity
if ! jq type "${input_json}" >/dev/null 2>&1; then
  echo_stderr "Could not confirm input json '${input_json}' was a valid json"
  print_help
  exit 1
fi

# Check name attribute
echo_stderr "Checking name attribute is present"
name_value="$(jq --raw-output '.name' "${input_json}")"
if ! check_name_value "${name_value}"; then
  exit 1
fi
echo_stderr "Name value is good"

echo_stderr "Checking input is present"
input_value="$(jq --raw-output '.input' "${input_json}")"
if ! check_input_value "${input_value}" "${ica_workflow_inputs-}" "${ICA_BASE_URL}" "${ICA_ACCESS_TOKEN}"; then
  exit 1
fi
echo_stderr "Input is good"

echo_stderr "Checking engineParameters"
engine_parameters_value="$(jq --raw-output '.engineParameters' "${input_json}")"
if ! check_engine_parameters "${engine_parameters_value}"; then
  exit 1
fi
echo_stderr "engineParameters is good"