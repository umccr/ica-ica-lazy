#!/usr/bin/env bash

: '
Given an input json checks the following

input is present
name is present
check if engineParameters is present - encourage user to use if not present
'


print_help(){
  echo "
  Usage ica-check-cwl-inputs (--input-json <json-file>)
                             [--ica-workflow-id <ica-workflow-id>]
                             [--ica-workflow-version-name <ica-workflow-version-name>]

  Description:
    Validates your input json and makes sure all inputs of type File and Directory are readable on GDS.

    Given the --ica-workflow-id and --ica-workflow-version-name, one can also make sure that the input key names
    match the ids of the ICA definition AND make sure all of the required inputs are present in the input json.

  Options:
    -i / --input-json: The input json file you wish to analyse
    -w / --ica-workflow-id: The ICA workflow ID you would like to check against
    -v / --ica-workflow-version-name: The ICA workflow version name you would like to check against.

  Requirements:
    * curl
    * jq
    * python3
    * sed (gnutls)

  Environment variables:
    * ICA_ACCESS_TOKEN
    * ICA_BASE_URL
  "
}

######
# ARGS
######

# Get args from the command line
input_json=""
ica_workflow_id=""
ica_workflow_version_name=""

# Get args from command line
while [ $# -gt 0 ]; do
  case "$1" in
    -i | --input-json)
      input_json="$2"
      shift 1
      ;;
    -w | --ica-workflow-id)
      ica_workflow_id="$2"
      shift 1
      ;;
    -v | --ica-workflow-version-name)
      ica_workflow_version_name="$2"
      shift 1
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
  esac
  shift 1
done

###########ICA-ICA-LAZY SETUP ########################################

if [[ -z "${ICA_ICA_LAZY_HOME-}" ]]; then
  echo "Error - please ensure env var 'ICA_ICA_LAZY_HOME' is set" 1>&2
  exit 1
fi

if [[ -d "${ICA_ICA_LAZY_HOME}/internal-functions" ]]; then
  for f in "${ICA_ICA_LAZY_HOME}/internal-functions/"*".sh"; do
      # shellcheck source=../internal-functions/*.sh
      source "$f"
  done
fi

##########END ICA-ICA-LAZY SETUP ####################################


# Check ICA_BASE_URL env var is set
if [[ -z "${ICA_BASE_URL-}" ]]; then
  echo_stderr "Please set ICA_BASE_URL"
  print_help
  exit 1
fi

# Check we're in a project context
if [[ -z "${ICA_ACCESS_TOKEN-}" ]]; then
  echo_stderr "Please specify ICA_ACCESS_TOKEN"
  print_help
  exit 1
fi

# Make sure input_json is defined and is a file
if [[ -z "${input_json}" ]]; then
  echo_stderr "Please specify --input-json"
  print_help
  exit 1
elif [[ ! -f "${input_json}" ]]; then
  echo_stderr "--input-json specified as ${input_json} but could not find file."
  print_help
  exit 1
fi

# Check token expiry
check_token_expiry "${ICA_ACCESS_TOKEN}"

# Check either none or both of ica-workflow-id and ica-workflow-version-name are defined
if [[ -n "${ica_workflow_id}" && -n "${ica_workflow_version_name}" ]]; then
  echo_stderr "--ica-workflow-id and --ica-workflow-version-name are defined, getting inputs from definition"

  # Get the definition
  ica_workflow_definition="$(get_definition_from_ica "${ica_workflow_id}" "${ica_workflow_version_name}" "${ICA_BASE_URL}" "${ICA_ACCESS_TOKEN}")"

  # Check definition was pulled correctly
  if [[ -z "${ica_workflow_definition}" || "${ica_workflow_definition}" == "null" ]]; then
    echo_stderr "Error! Workflow ${ica_workflow_id}/${ica_workflow_version_name} could not be found"
    echo_stderr "Are you sure the id and version are correct and you're in the correct project context?"
    exit 1
  fi

  # Get the inputs from the definition
  ica_workflow_inputs="$(get_inputs_from_cwl_definition "${ica_workflow_definition}")"

# Both aren't defined, make sure user hasn't tried to use one of them
elif [[ ( -z "${ica_workflow_id}" && -n "${ica_workflow_version_name}" ) || ( -n "${ica_workflow_id}" && -z "${ica_workflow_version_name}" ) ]]; then
  echo_stderr "You must define none or both of --ica-workflow-id and --ica-workflow-version-name"
  print_help
  exit 1

fi

# Check json integrity
if ! jq type "${input_json}" >/dev/null 2>&1; then
  echo_stderr "Could not confirm input json '${input_json}' was a valid json"
  print_help
  exit 1
fi

# Check name attribute
echo_stderr "Checking name attribute is present"
name_value="$(jq --raw-output '.name' "${input_json}")"
if ! check_name_value "${name_value}"; then
  exit 1
fi
echo_stderr "Name value is good"

echo_stderr "Checking input is present"
input_value="$(jq --raw-output '.input' "${input_json}")"
if ! check_input_value "${input_value}" "${ica_workflow_inputs-}" "${ICA_BASE_URL}" "${ICA_ACCESS_TOKEN}"; then
  exit 1
fi
echo_stderr "Input is good"

echo_stderr "Checking engineParameters"
engine_parameters_value="$(jq --raw-output '.engineParameters' "${input_json}")"
if ! check_engine_parameters "${engine_parameters_value}"; then
  exit 1
fi
echo_stderr "engineParameters is good"