#!/usr/bin/env bash

: '
Set up an access token for a project through cwl-ica

This script takes in the following inputs:

1. A project name
2. A scope level of read-only or admin
3. An existing ICA_ACCESS_TOKEN of your personal context, if it does not exist, creates one first

This script performs the following steps:

1. Creates a personal access token if ICA_ACCESS_TOKEN env var is not present
2. Validates that the project exists using the personal access token
3. Creates a project access token for the given scope
4. Adds the project token to the tokens.json file

This script has the following outputs:
N/A
'

set -euo pipefail

#########
# GLOBALS
#########

API_KEY_STORE_PATH="${ICA_ICA_LAZY_DEFAULT_API_KEY_PATH-/ica/api-keys/default-api-key}"

###########
# Functions
###########

# Standard functions
check_binaries(){
  : '
  Make sure that curl / jq / python3 / binary exists in PATH
  '
  if ! (type curl jq python3 1>/dev/null); then
    return 1
  fi
}

check_env_vars(){
  : '
  Make sure that ICA BASE URL is set
  '
  if [[ -z "${ICA_BASE_URL-}" ]]; then
    echo_stderr "Env var ICA_BASE_URL is not set"
    return 1
  fi
}

print_help(){
  echo "
  Usage ica-add-access-token (--project-name <project-name>) (--scope read-only|admin)

  Description:
    Creates and adds an access token to a restricted file in your home directory.
    Use --scope to specify the privilege level you would like for each project token.

  Options:
    -p / --project-name: Name of project context
    -s / --scope: Scope level

  Requirements:
    * curl
    * jq
    * python3
    * pass (recommended but optional)

  Environment variables:
    * ICA_BASE_URL
  "
}

######
# ARGS
######

# Get args from the command line

# Get args from command line
while [ $# -gt 0 ]; do
  case "$1" in
    -p | --project-name)
      project_name="$2"
      shift 1
      ;;
    -s | --scope)
      scope="$2"
      shift 1
      ;;
    -h | --help)
      print_help
      exit 0
      ;;
  esac
  shift 1
done

###########ICA-ICA-LAZY SETUP ########################################

if [[ -z "${ICA_ICA_LAZY_HOME-}" ]]; then
  echo "Error - please ensure env var 'ICA_ICA_LAZY_HOME' is set" 1>&2
  exit 1
fi

if [[ -d "${ICA_ICA_LAZY_HOME}/internal-functions" ]]; then
  for f in "${ICA_ICA_LAZY_HOME}/internal-functions/"*".sh"; do
      # shellcheck source=../internal-functions/*.sh
      source "$f"
  done
fi

##########END ICA-ICA-LAZY SETUP ####################################

# Check args
if [[ -z "${project_name-}" ]]; then
  echo_stderr "Error: --project-name not defined"
  print_help
  exit 1
fi

if [[ -z "${scope-}" ]]; then
  echo_stderr "Error: --scope not defined"
  print_help
  exit 1
elif [[ "${scope}" != "admin" && "${scope}" != "read-only" ]]; then
  echo_stderr "Error: --scope must be one of admin or read-only"
  print_help
  exit 1
fi

########
# CHECKS
#######

# Check available binaries exist
if ! check_binaries; then
  echo_stderr "Error: Please make sure binaries curl, jq and python3 are all available on your PATH variable"
  print_help
  exit 1
fi

# Check env vars exist
if ! check_env_vars; then
  echo_stderr "Error: Please make sure the ICA_BASE_URL is set"
  print_help
  exit 1
fi

# Check api key
if ! get_default_api_key >/dev/null; then
  echo_stderr "Error: Please make sure you have stored your personal api key at \"${API_KEY_STORE_PATH}\""
  exit 1
fi

#####################
# CREATE PERSONAL PAT
#####################
echo_stderr "Creating a personal access token"
personal_access_token="$(create_personal_access_token "${ICA_BASE_URL}")"
# Check personal token
if [[ -z "${personal_access_token}" || "${personal_access_token}" == "null" ]]; then
  echo_stderr "Error: Could not create a personal access token"
  exit 1
fi

################
# GET PROJECT ID
################
echo_stderr "Getting project id from project name"
project_id="$(get_project_id_from_project_name "${project_name}" "${personal_access_token}")"
# Check project id
if [[ -z "${project_id}" || "${project_id}" == "null" ]]; then
  echo_stderr "Error: Could not get project id from project name"
  exit 1
fi

######################
# CREATE PROJECT TOKEN
######################
echo_stderr "Creating project token"
project_access_token="$(create_project_token "${project_id}" "${scope}" "${ICA_BASE_URL}" "${personal_access_token}")"
# Check project token
if [[ -z "${project_access_token}" || "${project_access_token}" == "null" ]]; then
  echo_stderr "Error: Could not create a project access token"
  exit 1
fi

################################
# ADD PROJECT TOKEN TO FILE PATH
################################
echo_stderr "Saving project token"
add_token_to_json_file "${project_name}" "${scope}" "${project_access_token}"

echo_stderr "Token saved successfully"