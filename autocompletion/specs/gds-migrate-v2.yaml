---
name: gds-migrate-v2

title: Copy directory from one project to a project on v2

options:
  - name: src-project
    type: string
    summary: |
      The source gds project
    completion:
      command_string: |-
        cat "$HOME/.ica-ica-lazy/tokens/tokens.json" | jq -r 'keys[]'
  - name: src-path
    type: string
    summary: |
      The source gds folder path
    completion:
      command_string: |-
        project_index="-1";
        project_name="";
        if [[ "$(basename "${SHELL}")" == "bash" ]]; then
          for i in "${!words[@]}"; do
             if [[ "${words[$i]}" == "--src-project" ]]; then
                 project_index="$(expr $i + 1)";
             fi;
          done;
          project_name="${words[$project_index]}";
        elif [[ "$(basename "${SHELL}")" == "zsh" ]]; then
          for ((i = 1; i <= $#words; i++)); do
             if [[ "${words[$i]}" == "--src-project" ]]; then
                 project_index="$(expr $i + 1)";
             fi;
          done;
          project_name="${words[$project_index]}";
        fi;
        if [[ -z "${project_name}" ]]; then
          gds-ls "${CURRENT_WORD}";
        else
          ica_access_token="$(jq --raw-output --arg project_name "${project_name}" '.[$project_name] | to_entries[0] | .value' "$HOME/.ica-ica-lazy/tokens/tokens.json")";
          ICA_ACCESS_TOKEN="${ica_access_token}" gds-ls "${CURRENT_WORD}";
        fi
  - name: dest-project
    type: string
    summary: |
      The destination gds project
    completion:
      command_string: |-
        if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
          curl --silent --fail --location --request "GET" \
               --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
               --header 'Accept: application/vnd.illumina.v3+json' \
               --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
          jq --raw-output '.items[] | .name'
        fi
  - name: dest-path
    type: string
    summary: |
      The destination folder path for the v2 directory
    completion:
      command_string: |-
          if [[ -n "${ICAV2_ACCESS_TOKEN-}" ]]; then
              project_index="-1";
              project_name="";
              if [[ "$(basename "${SHELL}")" == "bash" ]]; then
                  for i in "${!words[@]}"; do
                     if [[ "${words[$i]}" == "--dest-project" ]]; then
                         project_index="$(expr $i + 1)";
                         project_name="${words[$project_index]}";
                     fi;
                  done;
              elif [[ "$(basename "${SHELL}")" == "zsh" ]]; then
                  for ((i = 1; i <= $#words; i++)); do
                     if [[ "${words[$i]}" == "--dest-project" ]]; then
                         project_index="$(expr $i + 1)";
                         project_name="${words[$project_index]}";
                     fi;
                  done;
              fi;
            if [[ -n "${project_name}" ]]; then
              project_id="$(curl --silent --fail --location \
                              --request "GET" \
                              --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects" \
                              --header "Accept: application/vnd.illumina.v3+json" \
                              --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" | \
                            jq --raw-output \
                              --arg "project_name" "${project_name}" \
                              '.items[] | select(.name==$project_name) | .id')";
              if [[ "${CURRENT_WORD}" == */ ]]; then
                parent_folder="${CURRENT_WORD}";
              else
                parent_folder="$(dirname "${CURRENT_WORD}")";
              fi;
              curl --silent --fail --location \
                --request "GET" \
                --header "Accept: application/vnd.illumina.v3+json" \
                --header "Authorization: Bearer ${ICAV2_ACCESS_TOKEN}" \
                --url "https://${ICAV2_BASE_URL-ica.illumina.com}/ica/rest/api/projects/${project_id}/data?parentFolderPath=${parent_folder%/}/&filenameMatchMode=EXACT&type=FOLDER" | 
              jq --raw-output \
                '.items[] | .data.details.path';
            fi
  - name: rsync-args
    type: string
    summary: |
      Comma separated list of rsync args
  - name: stream
    summary: |
      Stream inputs rather than download into container